//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBDataContext : DbContext
    {
        public DBDataContext()
            : base("name=DBDataContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("DBDataContext", "F_AllPatients")]
        public virtual IQueryable<F_AllPatients_Result> F_AllPatients(string personnelUserName)
        {
            var personnelUserNameParameter = personnelUserName != null ?
                new ObjectParameter("PersonnelUserName", personnelUserName) :
                new ObjectParameter("PersonnelUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_AllPatients_Result>("[DBDataContext].[F_AllPatients](@PersonnelUserName)", personnelUserNameParameter);
        }
    
        [DbFunction("DBDataContext", "F_Dictionary")]
        public virtual IQueryable<F_Dictionary_Result> F_Dictionary(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_Dictionary_Result>("[DBDataContext].[F_Dictionary](@Language)", languageParameter);
        }
    
        [DbFunction("DBDataContext", "F_HistoryTasks")]
        public virtual IQueryable<F_HistoryTasks_Result> F_HistoryTasks(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_HistoryTasks_Result>("[DBDataContext].[F_HistoryTasks](@Language)", languageParameter);
        }
    
        [DbFunction("DBDataContext", "F_NotificationTypes")]
        public virtual IQueryable<F_NotificationTypes_Result> F_NotificationTypes(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_NotificationTypes_Result>("[DBDataContext].[F_NotificationTypes](@Language)", languageParameter);
        }
    
        [DbFunction("DBDataContext", "F_Nurses")]
        public virtual IQueryable<F_Nurses_Result> F_Nurses(string personnelUserName)
        {
            var personnelUserNameParameter = personnelUserName != null ?
                new ObjectParameter("PersonnelUserName", personnelUserName) :
                new ObjectParameter("PersonnelUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_Nurses_Result>("[DBDataContext].[F_Nurses](@PersonnelUserName)", personnelUserNameParameter);
        }
    
        [DbFunction("DBDataContext", "F_NurseWorkLoad")]
        public virtual IQueryable<F_NurseWorkLoad_Result> F_NurseWorkLoad(Nullable<int> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_NurseWorkLoad_Result>("[DBDataContext].[F_NurseWorkLoad](@TaskID)", taskIDParameter);
        }
    
        [DbFunction("DBDataContext", "F_Patients")]
        public virtual IQueryable<F_Patients_Result> F_Patients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_Patients_Result>("[DBDataContext].[F_Patients]()");
        }
    
        [DbFunction("DBDataContext", "F_PriorityTypes")]
        public virtual IQueryable<F_PriorityTypes_Result> F_PriorityTypes(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_PriorityTypes_Result>("[DBDataContext].[F_PriorityTypes](@Language)", languageParameter);
        }
    
        [DbFunction("DBDataContext", "F_StatusTypes")]
        public virtual IQueryable<F_StatusTypes_Result> F_StatusTypes(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_StatusTypes_Result>("[DBDataContext].[F_StatusTypes](@Language)", languageParameter);
        }
    
        [DbFunction("DBDataContext", "F_TaskTypes")]
        public virtual IQueryable<F_TaskTypes_Result> F_TaskTypes(string language)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_TaskTypes_Result>("[DBDataContext].[F_TaskTypes](@Language)", languageParameter);
        }
    
        [DbFunction("DBDataContext", "F_ViewTaskDetails")]
        public virtual IQueryable<F_ViewTaskDetails_Result> F_ViewTaskDetails(Nullable<int> taskID, string language)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_ViewTaskDetails_Result>("[DBDataContext].[F_ViewTaskDetails](@TaskID, @Language)", taskIDParameter, languageParameter);
        }
    
        [DbFunction("DBDataContext", "F_ViewTasks")]
        public virtual IQueryable<F_ViewTasks_Result> F_ViewTasks(string language, string doctor_UID, string hNurse_UID, string nurse_UID)
        {
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var doctor_UIDParameter = doctor_UID != null ?
                new ObjectParameter("Doctor_UID", doctor_UID) :
                new ObjectParameter("Doctor_UID", typeof(string));
    
            var hNurse_UIDParameter = hNurse_UID != null ?
                new ObjectParameter("HNurse_UID", hNurse_UID) :
                new ObjectParameter("HNurse_UID", typeof(string));
    
            var nurse_UIDParameter = nurse_UID != null ?
                new ObjectParameter("Nurse_UID", nurse_UID) :
                new ObjectParameter("Nurse_UID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_ViewTasks_Result>("[DBDataContext].[F_ViewTasks](@Language, @Doctor_UID, @HNurse_UID, @Nurse_UID)", languageParameter, doctor_UIDParameter, hNurse_UIDParameter, nurse_UIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Authenticate(string userName, string password, ObjectParameter isAuthenticated)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Authenticate", userNameParameter, passwordParameter, isAuthenticated);
        }
    
        public virtual ObjectResult<string> SP_GetRoles(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetRoles", userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetUserID(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetUserID", userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Task_Assign(Nullable<int> taskID, Nullable<int> nurseID, string personnel_UID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var nurseIDParameter = nurseID.HasValue ?
                new ObjectParameter("NurseID", nurseID) :
                new ObjectParameter("NurseID", typeof(int));
    
            var personnel_UIDParameter = personnel_UID != null ?
                new ObjectParameter("Personnel_UID", personnel_UID) :
                new ObjectParameter("Personnel_UID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Task_Assign", taskIDParameter, nurseIDParameter, personnel_UIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Tasks_Add(Nullable<int> typeID, Nullable<int> patientID, Nullable<int> priorityID, string instr, string creator_Name, ObjectParameter newTaskID)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var priorityIDParameter = priorityID.HasValue ?
                new ObjectParameter("PriorityID", priorityID) :
                new ObjectParameter("PriorityID", typeof(int));
    
            var instrParameter = instr != null ?
                new ObjectParameter("Instr", instr) :
                new ObjectParameter("Instr", typeof(string));
    
            var creator_NameParameter = creator_Name != null ?
                new ObjectParameter("Creator_Name", creator_Name) :
                new ObjectParameter("Creator_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Tasks_Add", typeIDParameter, patientIDParameter, priorityIDParameter, instrParameter, creator_NameParameter, newTaskID);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Tasks_Delete(Nullable<int> taskID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Tasks_Delete", taskIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Tasks_Report(Nullable<int> taskID, Nullable<int> statusID, string attachment, string comment, string personnel_UID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var personnel_UIDParameter = personnel_UID != null ?
                new ObjectParameter("Personnel_UID", personnel_UID) :
                new ObjectParameter("Personnel_UID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Tasks_Report", taskIDParameter, statusIDParameter, attachmentParameter, commentParameter, personnel_UIDParameter);
        }
    
        [DbFunction("DBDataContext", "F_FollowedPatients")]
        public virtual IQueryable<F_FollowedPatients_Result> F_FollowedPatients(string personnel_UID)
        {
            var personnel_UIDParameter = personnel_UID != null ?
                new ObjectParameter("Personnel_UID", personnel_UID) :
                new ObjectParameter("Personnel_UID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_FollowedPatients_Result>("[DBDataContext].[F_FollowedPatients](@Personnel_UID)", personnel_UIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Follow_Patient(string personnel_UID, Nullable<int> patientID)
        {
            var personnel_UIDParameter = personnel_UID != null ?
                new ObjectParameter("Personnel_UID", personnel_UID) :
                new ObjectParameter("Personnel_UID", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Follow_Patient", personnel_UIDParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Unfollow_Patient(string personnel_UID, Nullable<int> patient_ID)
        {
            var personnel_UIDParameter = personnel_UID != null ?
                new ObjectParameter("Personnel_UID", personnel_UID) :
                new ObjectParameter("Personnel_UID", typeof(string));
    
            var patient_IDParameter = patient_ID.HasValue ?
                new ObjectParameter("Patient_ID", patient_ID) :
                new ObjectParameter("Patient_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Unfollow_Patient", personnel_UIDParameter, patient_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Tasks_Edit(Nullable<int> taskID, Nullable<int> statusID, Nullable<int> priorityID, string instructions, string personnel_UID)
        {
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var priorityIDParameter = priorityID.HasValue ?
                new ObjectParameter("PriorityID", priorityID) :
                new ObjectParameter("PriorityID", typeof(int));
    
            var instructionsParameter = instructions != null ?
                new ObjectParameter("Instructions", instructions) :
                new ObjectParameter("Instructions", typeof(string));
    
            var personnel_UIDParameter = personnel_UID != null ?
                new ObjectParameter("Personnel_UID", personnel_UID) :
                new ObjectParameter("Personnel_UID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Tasks_Edit", taskIDParameter, statusIDParameter, priorityIDParameter, instructionsParameter, personnel_UIDParameter);
        }
    }
}
